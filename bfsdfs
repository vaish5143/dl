[12:48 PM, 4/29/2025] Ravindra Kadam: #include <iostream>
#include <vector>
#include <queue>
#include <omp.h>

using namespace std;

class Graph {
public:
    int V;  // Number of vertices
    vector<vector<int>> adj;

    Graph(int V) {
        this->V = V;
        adj.resize(V);
    }

    void add_edge(int u, int v) {
        adj[u].push_back(v);
        adj[v].push_back(u);  // undirected graph
    }

    void bfs_parallel(int start) {
        vector<bool> visited(V, false);
        queue<int> q;

        visited[start] = true;
        q.push(start);

        cout << "Parallel BFS traversal starting from node " << start << ": ";

        #pragma omp parallel
        {
            #pragma omp single
            {
                while (!q.empty()) {
                    int current = q.front();
                    q.pop();
                    cout << current << " ";

                    #pragma omp parallel for
                    for (int i = 0; i < adj[current].size(); i++) {
                        int neighbor = adj[current][i];
                        if (!visited[neighbor]) {
                            visited[neighbor] = true;
                            #pragma omp critical
                            q.push(neighbor);
                        }
                    }
                }
            }
        }
        cout << endl;
    }
};

int main() {
    Graph g(6);

    g.add_edge(0, 1);
    g.add_edge(0, 2);
    g.add_edge(1, 3);
    g.add_edge(1, 4);
    g.add_edge(2, 5);

    g.bfs_parallel(0);

    return 0;
}
[12:48 PM, 4/29/2025] Ravindra Kadam: #include <iostream>
#include <vector>
#include <omp.h>

using namespace std;

class Graph {
public:
    int V;  // Number of vertices
    vector<vector<int>> adj;

    Graph(int V) {
        this->V = V;
        adj.resize(V);
    }

    void add_edge(int u, int v) {
        adj[u].push_back(v);
        adj[v].push_back(u);  // undirected graph
    }

    void dfs_parallel_helper(int node, vector<bool>& visited) {
        visited[node] = true;
        cout << node << " ";

        #pragma omp parallel for
        for (int i = 0; i < adj[node].size(); i++) {
            int neighbor = adj[node][i];
            if (!visited[neighbor]) {
                dfs_parallel_helper(neighbor, visited);
            }
        }
    }

    void dfs_parallel(int start) {
        vector<bool> visited(V, false);
        cout << "Parallel DFS traversal starting from node " << start << ": ";
        dfs_parallel_helper(start, visited);
        cout << endl;
    }
};

int main() {
    Graph g(6);

    g.add_edge(0, 1);
    g.add_edge(0, 2);
    g.add_edge(1, 3);
    g.add_edge(1, 4);
    g.add_edge(2, 5);

    g.dfs_parallel(0);

    return 0;
}
